name: CI/CD to AKS

on:
  push:
    branches: [ 'main' ]

env:
  RESOURCE_GROUP: '$RG'
  AKS_CLUSTER: '$AKS_NAME'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Azure (OIDC)
        uses: azure/login@v1
        with:
          client-id: '${{ secrets.AZURE_CLIENT_ID }}'
          tenant-id: '${{ secrets.AZURE_TENANT_ID }}'
          subscription-id: '${{ secrets.AZURE_SUBSCRIPTION_ID }}'

      - name: Log in to ACR
        uses: azure/docker-login@v2
        with:
          login-server: '$ACR_LOGIN_SERVER'

      - name: Set image tag
        run: echo 'IMAGE_TAG=${GITHUB_SHA::8}' >> '$GITHUB_ENV'

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./demo-app
          push: true
          tags: '$ACR_LOGIN_SERVER/mi-app:${{ env.IMAGE_TAG }}'

      - name: Output image name
        run: echo 'IMAGE=$ACR_LOGIN_SERVER/mi-app:${{ env.IMAGE_TAG }}' >> '$GITHUB_OUTPUT'

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Azure (OIDC)
        uses: azure/login@v1
        with:
          client-id: '${{ secrets.AZURE_CLIENT_ID }}'
          tenant-id: '${{ secrets.AZURE_TENANT_ID }}'
          subscription-id: '${{ secrets.AZURE_SUBSCRIPTION_ID }}'

      - name: Set AKS context
        uses: azure/aks-set-context@v1
        with:
          resource-group: '${{ env.RESOURCE_GROUP }}'
          cluster-name: '${{ env.AKS_CLUSTER }}'

      - name: Deploy to AKS
        env:
          IMAGE: '${{ needs.build-and-push.outputs.IMAGE }}'
        run: |
          sed -i "s|{{IMAGE}}|$IMAGE|g" k8s/deployment.yaml || true
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl rollout status deployment/mi-app --timeout=120s
